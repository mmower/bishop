var search_data = {"index":{"searchIndex":["bishop","bayes","simpletokenizer","stemmingtokenizer","add_stop_word()","add_stop_words()","guess()","load_default_stop_words()","load_stop_words()","load_yaml()","merge_pools()","new()","new_pool()","pool()","pool_names()","remove_pool()","rename_pool()","robinson()","robinson_fisher()","save_yaml()","to_json()","to_yaml()","tokenize()","tokenize()","train()","trained_on?()","untrain()","changelog","readme"],"longSearchIndex":["bishop","bishop::bayes","bishop::simpletokenizer","bishop::stemmingtokenizer","bishop::bayes#add_stop_word()","bishop::bayes#add_stop_words()","bishop::bayes#guess()","bishop::bayes#load_default_stop_words()","bishop::bayes#load_stop_words()","bishop::bayes#load_yaml()","bishop::bayes#merge_pools()","bishop::bayes::new()","bishop::bayes#new_pool()","bishop::bayes#pool()","bishop::bayes#pool_names()","bishop::bayes#remove_pool()","bishop::bayes#rename_pool()","bishop::robinson()","bishop::robinson_fisher()","bishop::bayes#save_yaml()","bishop::bayes#to_json()","bishop::bayes#to_yaml()","bishop::simpletokenizer#tokenize()","bishop::stemmingtokenizer#tokenize()","bishop::bayes#train()","bishop::bayes#trained_on?()","bishop::bayes#untrain()","",""],"info":[["Bishop","","Bishop.html","",""],["Bishop::Bayes","","Bishop/Bayes.html","",""],["Bishop::SimpleTokenizer","","Bishop/SimpleTokenizer.html","","<p>A tokenizer class which splits words removing non word characters except\nhyphens.\n"],["Bishop::StemmingTokenizer","","Bishop/StemmingTokenizer.html","","<p>A tokenizer which, having split words, reduces them to porter stemmed\ntokens\n"],["add_stop_word","Bishop::Bayes","Bishop/Bayes.html#method-i-add_stop_word","( word )","<p>Add the specified stop word\n"],["add_stop_words","Bishop::Bayes","Bishop/Bayes.html#method-i-add_stop_words","( words )","<p>Add an array of stop words\n"],["guess","Bishop::Bayes","Bishop/Bayes.html#method-i-guess","( msg )","<p>Call this method to classify a “message”.  The return value will be a hash,\nwith the pool name …\n"],["load_default_stop_words","Bishop::Bayes","Bishop/Bayes.html#method-i-load_default_stop_words","()","<p>Load the default stop word list included with Bishop\n"],["load_stop_words","Bishop::Bayes","Bishop/Bayes.html#method-i-load_stop_words","( source )","<p>Load stopwords from the specified YAML formatted file\n"],["load_yaml","Bishop::Bayes","Bishop/Bayes.html#method-i-load_yaml","( file = 'bayesdata.yml' )","<p>Load the current state from a YAML file, default = &#39;bayesdata.yml&#39;\n"],["merge_pools","Bishop::Bayes","Bishop/Bayes.html#method-i-merge_pools","( dest_name, source_name )","<p>Merge the contents of the source pool into the destination destination\npool.\n"],["new","Bishop::Bayes","Bishop/Bayes.html#method-c-new","( tokenizer = SimpleTokenizer, &combiner )","<p>tokenizer is the name of the class that will separate the input into\ntokens.  See SimpleTokenizer and …\n"],["new_pool","Bishop::Bayes","Bishop/Bayes.html#method-i-new_pool","( pool_name )","<p>Create a new, empty, pool without training.\n"],["pool","Bishop::Bayes","Bishop/Bayes.html#method-i-pool","(pool_name)","<p>Get the pool specified by name\n"],["pool_names","Bishop::Bayes","Bishop/Bayes.html#method-i-pool_names","()","<p>Get a list of pools\n"],["remove_pool","Bishop::Bayes","Bishop/Bayes.html#method-i-remove_pool","( pool_name )","<p>Remove the given pool\n"],["rename_pool","Bishop::Bayes","Bishop/Bayes.html#method-i-rename_pool","( pool_name, new_name )","<p>Rename the given pool\n"],["robinson","Bishop","Bishop.html#method-c-robinson","( probs, ignore )","<p>default “combiner” set in initialize ignore is truly ignored\n"],["robinson_fisher","Bishop","Bishop.html#method-c-robinson_fisher","( probs, ignore )","<p>Alternative combiner\n"],["save_yaml","Bishop::Bayes","Bishop/Bayes.html#method-i-save_yaml","( file = 'bayesdata.yml' )","<p>Save the current state to a YAML file, default = &#39;bayesdata.yml&#39;\n"],["to_json","Bishop::Bayes","Bishop/Bayes.html#method-i-to_json","()","<p>Gets the current state in JSON format\n"],["to_yaml","Bishop::Bayes","Bishop/Bayes.html#method-i-to_yaml","()","<p>Gets the current state in YAML format\n"],["tokenize","Bishop::SimpleTokenizer","Bishop/SimpleTokenizer.html#method-i-tokenize","( item, stop_words=[] )",""],["tokenize","Bishop::StemmingTokenizer","Bishop/StemmingTokenizer.html#method-i-tokenize","( item, stop_words=[] )",""],["train","Bishop::Bayes","Bishop/Bayes.html#method-i-train","( pool_name, input )","<p>Train the specified pool with the given input.\n<p>If the input is a string it is passed through the configured …\n"],["trained_on?","Bishop::Bayes","Bishop/Bayes.html#method-i-trained_on-3F","( token )","<p>Returns true if the specified token has been trained for any pool\n"],["untrain","Bishop::Bayes","Bishop/Bayes.html#method-i-untrain","( pool_name, input )","<p>Remove the input from the given pool If the input is a string it is passed\nthrough the configured Tokenizer …\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>Revisions\n<p>0.5.0\n<p>Lots of refactoring, cleanup, making methods private, etc.\n"],["README","","README_md.html","","<p>Introduction\n<p>This is a Naive Bayes classifier that can be used to categorize text based\non trained “pools”. …\n"]]}}